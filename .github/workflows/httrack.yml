name: Clone, Upload, Deploy to Pages, and Callback

on:
  workflow_dispatch:
    inputs:
      websiteUrl:
        description: 'Website URL to clone'
        required: true
        type: string
      email:
        description: 'User Email for notification'
        required: true
        type: string

permissions:
  contents: write

jobs:
  clone_deploy_callback:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.final_status.outputs.status }}
      preview_url: ${{ steps.final_status.outputs.preview_url }}
      error_message: ${{ steps.final_status.outputs.error_message }}
    env:
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      GH_TOKEN: ${{ secrets.CLOUDFLARE_WORKER_PAT }}

    steps:
      - name: Initialize Status
        id: status_init
        run: |
          echo "status=pending" >> $GITHUB_OUTPUT
          echo "error_message=Workflow started" >> $GITHUB_OUTPUT
          echo "preview_url=''" >> $GITHUB_OUTPUT

      - name: Install required tools
        id: install_tools
        run: |
          sudo apt-get update && sudo apt-get install -y httrack jq
          echo "Verifying tools..."
          which git
          which gh
          which curl
          which jq
          which httrack
          which npm
          npm --version

      - name: Setup Node.js for Wrangler
        uses: actions/setup-node@v4
        with:
          node-version: 20 # or your preferred Node.js version
          cache: 'npm'

      - name: Install Wrangler CLI
        id: install_wrangler
        run: |
          echo "Installing Wrangler globally..."
          npm install -g wrangler
          if ! wrangler --version; then
             echo "::error:: Wrangler command not found after global install."
             exit 1
          fi
          echo "Wrangler installation verified."

      - name: Configure git
        id: configure_git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions Migration Bot"

      - name: Verify GitHub CLI Authentication
        id: authenticate_gh
        run: |
          echo "Verifying GH CLI authentication using GH_TOKEN env var..."
          gh auth status
          echo "GH CLI authentication appears successful."

      - name: Run httrack to mirror website
        id: httrack_clone
        run: |
          OUTPUT_DIR="cloned_website_${{ github.run_id }}"
          echo "Cloning ${{ github.event.inputs.websiteUrl }} into $OUTPUT_DIR"

          URL="${{ github.event.inputs.websiteUrl }}"
          if [[ $URL == http://* ]]; then
            URL="https://${URL#http://}"
            echo "Converting to HTTPS: $URL"
          fi

          httrack "$URL" \
            -O "$OUTPUT_DIR" \
            -I0 \
            --depth=10 \
            --user-agent "Mozilla/5.0" \
            --disable-security-limits \
            --robots=0 \
            -s0 \
            --extended-parsing \
            --update \
            +*.js \
            +*.css \
            +*.png +*.jpg +*.gif \
            +*.woff +*.woff2

          if [ ! -d "$OUTPUT_DIR" ] || [ ! -f "$OUTPUT_DIR/index.html" ]; then
            echo "::error:: HTTrack failed to create output directory or index.html"
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "error_message=HTTrack failed to clone the site properly." >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "output_dir=$OUTPUT_DIR" >> $GITHUB_OUTPUT

      - name: Create new GitHub repository
        id: create_repo
        if: steps.authenticate_gh.outcome == 'success' && steps.httrack_clone.outcome == 'success'
        env:
          GH_REPO_NAME: "migrated-${{ github.run_id }}"
          GH_REPO_DESCRIPTION: "Migrated site for ${{ github.event.inputs.websiteUrl }}"
        run: |
          echo "Creating repository ${{ github.repository_owner }}/${GH_REPO_NAME}"
          if ! gh repo create "${{ github.repository_owner }}/${GH_REPO_NAME}" --public --description "$GH_REPO_DESCRIPTION" --clone=false; then
             echo "::error:: Failed to create GitHub repository."
             echo "status=failure" >> $GITHUB_OUTPUT
             echo "error_message=Failed to create the GitHub repository." >> $GITHUB_OUTPUT
             exit 1
          fi
          echo "repo_name=${GH_REPO_NAME}" >> $GITHUB_OUTPUT

      - name: Initialize repository and push mirror
        id: push_code
        if: steps.create_repo.outcome == 'success'
        run: |
          REPO_NAME="${{ steps.create_repo.outputs.repo_name }}"
          OUTPUT_DIR="${{ steps.httrack_clone.outputs.output_dir }}"
          REPO_URL="https://x-access-token:${{ env.GH_TOKEN }}@github.com/${{ github.repository_owner }}/${REPO_NAME}.git"

          echo "Pushing code to $REPO_NAME"
          cd "$OUTPUT_DIR" || exit 1
          git init -b main
          git remote add origin "$REPO_URL"
          git add .
          if ! git diff --staged --quiet; then
            git commit -m "Initial mirror of ${{ github.event.inputs.websiteUrl }}"
            if ! git push -u origin main; then
                sleep 5
                if ! git push -u origin main; then
                    echo "::error:: Failed to push code to GitHub repository after retry."
                    echo "status=failure" >> $GITHUB_OUTPUT
                    echo "error_message=Failed to push code to the GitHub repository." >> $GITHUB_OUTPUT
                    exit 1
                fi
            fi
          else
            echo "::error:: No changes detected to commit."
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "error_message=HTTrack downloaded an empty site or failed to find content." >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Create Cloudflare Pages Project
        id: create_cf_project
        if: steps.push_code.outcome == 'success'
        run: |
          PROJECT_NAME="${{ steps.create_repo.outputs.repo_name }}"
          echo "Attempting to create Cloudflare Pages project: $PROJECT_NAME"

          CREATE_OUTPUT=$(npx wrangler pages project create "$PROJECT_NAME" --production-branch="main" 2>&1) || true
          CREATE_EXIT_CODE=$?

          echo "--- Create Project Output ---"
          echo "$CREATE_OUTPUT"
          echo "--- End Create Project Output ---"
          echo "Create Project Exit Code: $CREATE_EXIT_CODE"

          if echo "$CREATE_OUTPUT" | grep -q "A project with this name already exists"; then
            echo "Project '$PROJECT_NAME' already exists. Proceeding with deployment."
          elif [ $CREATE_EXIT_CODE -ne 0 ]; then
            echo "::error:: Failed to create Cloudflare Pages project '$PROJECT_NAME'. Exit code: $CREATE_EXIT_CODE"
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "error_message=Failed to create Cloudflare Pages project (Code: $CREATE_EXIT_CODE)." >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "Cloudflare Pages project creation/verification successful."
          echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT

      - name: Deploy to Cloudflare Pages
        id: deploy_pages
        if: steps.create_cf_project.outcome == 'success'
        run: |
          OUTPUT_DIR="${{ steps.httrack_clone.outputs.output_dir }}"
          PROJECT_NAME="${{ steps.create_cf_project.outputs.project_name }}"

          TARGET_DOMAIN=$(echo "${{ github.event.inputs.websiteUrl }}" | sed -E 's|^https?://||;s|/.*$||')
          DEPLOY_DIR="$OUTPUT_DIR/$TARGET_DOMAIN"

          if [ ! -d "$DEPLOY_DIR" ] || [ ! -f "$DEPLOY_DIR/index.html" ]; then
            echo "::error:: Correct subfolder '$TARGET_DOMAIN' not found or missing index.html"
            echo "Directory contents:"
            ls -la "$OUTPUT_DIR"
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "error_message=HTTrack did not create expected '$TARGET_DOMAIN' subfolder." >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "Deploying from verified subfolder: $DEPLOY_DIR"
          ls -la "$DEPLOY_DIR"

          WRANGLER_STDOUT_FILE=$(mktemp)
          WRANGLER_STDERR_FILE=$(mktemp)

          npx wrangler pages deploy "$DEPLOY_DIR" --project-name="$PROJECT_NAME" > "$WRANGLER_STDOUT_FILE" 2> "$WRANGLER_STDERR_FILE" || true
          WRANGLER_EXIT_CODE=$?

          DEPLOY_OUTPUT=$(cat "$WRANGLER_STDOUT_FILE" "$WRANGLER_STDERR_FILE")
          rm -f "$WRANGLER_STDOUT_FILE" "$WRANGLER_STDERR_FILE"

          echo "--- Wrangler Deploy Output ---"
          echo "$DEPLOY_OUTPUT"
          echo "Wrangler Deploy Exit Code: $WRANGLER_EXIT_CODE"

          if [ $WRANGLER_EXIT_CODE -ne 0 ]; then
            echo "::error:: Wrangler deploy command failed with exit code $WRANGLER_EXIT_CODE."
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "error_message=Failed to deploy to Cloudflare Pages (Code: $WRANGLER_EXIT_CODE)." >> $GITHUB_OUTPUT
            exit 1
          fi

          PREVIEW_URL=$(echo "$DEPLOY_OUTPUT" | grep -o 'https://.*\.pages\.dev')
          if [ -z "$PREVIEW_URL" ]; then
            echo "::error:: Failed to extract Cloudflare Pages URL from deploy output."
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "error_message=Deployment succeeded but failed to extract preview URL." >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "Deployment successful: $PREVIEW_URL"
          echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Final Status and Callback
        id: final_status
        if: always()
        # Aggregate status and error message from previous steps
        run: |
          STATUS=$( steps.status_init.outputs.status )
          PREVIEW_URL=$( steps.deploy_pages.outputs.preview_url )
          ERROR_MESSAGE=$( steps.status_init.outputs.error_message )

          if [ "${{ steps.install_tools.outcome }}" != "success" ] || [ "${{ steps.install_wrangler.outcome }}" != "success" ] || [ "${{ steps.configure_git.outcome }}" != "success" ] || [ "${{ steps.authenticate_gh.outcome }}" != "success" ] || [ "${{ steps.httrack_clone.outcome }}" != "success" ] || [ "${{ steps.create_repo.outcome }}" != "success" ] || [ "${{ steps.push_code.outcome }}" != "success" ] || [ "${{ steps.create_cf_project.outcome }}" != "success" ] || [ "${{ steps.deploy_pages.outcome }}" != "success" ]; then
            STATUS="failure"
            ERROR_MESSAGE="" # Reset error message for aggregation

            if [ "${{ steps.install_tools.outcome }}" != "success" ]; then
              ERROR_MESSAGE+="\nInstall tools failed."
            fi
            if [ "${{ steps.install_wrangler.outcome }}" != "success" ]; then
              ERROR_MESSAGE+="\nWrangler installation failed."
            fi
            if [ "${{ steps.configure_git.outcome }}" != "success" ]; then
              ERROR_MESSAGE+="\nGit configuration failed."
            fi
            if [ "${{ steps.authenticate_gh.outcome }}" != "success" ]; then
              ERROR_MESSAGE+="\nGitHub authentication failed."
            fi
            if [ "${{ steps.httrack_clone.outcome }}" != "success" ]; then
              ERROR_MESSAGE+="\nWebsite cloning (HTTrack) failed. Error: ${{ steps.httrack_clone.outputs.error_message }}"
            fi
            if [ "${{ steps.create_repo.outcome }}" != "success" ]; then
              ERROR_MESSAGE+="\nRepository creation failed. Error: ${{ steps.create_repo.outputs.error_message }}"
            fi
            if [ "${{ steps.push_code.outcome }}" != "success" ]; then
              ERROR_MESSAGE+="\nCode push failed. Error: ${{ steps.push_code.outputs.error_message }}"
            fi
            if [ "${{ steps.create_cf_project.outcome }}" != "success" ]; then
              ERROR_MESSAGE+="\nCloudflare Pages project creation failed. Error: ${{ steps.create_cf_project.outputs.error_message }}"
            fi
            if [ "${{ steps.deploy_pages.outcome }}" != "success" ]; then
              ERROR_MESSAGE+="\nDeployment to Cloudflare Pages failed. Error: ${{ steps.deploy_pages.outputs.error_message }}"
            fi
            if [ -z "$ERROR_MESSAGE" ]; then
              ERROR_MESSAGE="Unknown error occurred during workflow."
            fi

            echo "status=failure" >> $GITHUB_OUTPUT
            echo "error_message=$ERROR_MESSAGE" >> $GITHUB_OUTPUT
            echo "preview_url=''" >> $GITHUB_OUTPUT # Clear preview URL on failure

            STATUS="failure"
            PREVIEW_URL="" # Clear preview URL in script context as well
          else
            STATUS="success" # Override status to success if all steps are successful, even if init was pending.
            echo "status=success" >> $GITHUB_OUTPUT
          fi

          echo "Final Status: $STATUS"
          echo "Final Preview URL: $PREVIEW_URL"
          echo "Final Error Message: $ERROR_MESSAGE"

          echo "::group::Send Callback"
          CALLBACK_URL="${{ secrets.CLOUDFLARE_WORKER_CALLBACK_URL }}"
          USER_EMAIL="${{ github.event.inputs.email }}"
          WEBSITE_URL="${{ github.event.inputs.websiteUrl }}"

          # Ensure STATUS is never empty before sending
          if [ -z "$STATUS" ]; then
            echo "::error:: STATUS is empty, setting to failure before callback."
            STATUS="failure"
            ERROR_MESSAGE="Workflow failed to determine final status."
          fi

          JSON_PAYLOAD=$(jq -n \
            --arg status "$STATUS" \
            --arg email "$USER_EMAIL" \
            --arg website "$WEBSITE_URL" \
            --arg url "$PREVIEW_URL" \
            --arg error "$ERROR_MESSAGE" \
            '{status: $status, userEmail: $email, websiteUrl: $website, previewUrl: $url, errorMessage: $error}')

          echo "Payload: $JSON_PAYLOAD"

          curl -X POST "$CALLBACK_URL" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD" \
            --fail --silent --show-error
          echo "::endgroup::"
